# ejemplo_reporte.py
"""
Ejemplo de uso completo del Portfolio Analyzer.

Este script demuestra c√≥mo utilizar todas las funcionalidades del sistema
para generar un an√°lisis completo de portafolio, incluyendo:
- An√°lisis de rendimiento y riesgo
- Optimizaci√≥n de portafolios
- Generaci√≥n de gr√°ficos profesionales
- Reportes autom√°ticos en Markdown

Uso:
    python ejemplo_reporte.py

Autor: Portfolio Analyzer Team
Fecha: Julio 2025
Versi√≥n: 2.0.0
"""

import pandas as pd
import numpy as np
from src.portfolio_metrics import generate_complete_analysis, calculate_portfolio_returns
from src.data_manager import calculate_returns, get_current_asset_info
import sys
import os

# Habilitar import del proveedor de datos ubicado en la ra√≠z del proyecto
ROOT_DIR = os.path.dirname(os.path.dirname(__file__))
if ROOT_DIR not in sys.path:
    sys.path.append(ROOT_DIR)
from client_data_provider import (
    get_client_portfolio,
    fetch_portfolio_market_data,
)
from datetime import datetime, timedelta
import os

def ejemplo_reporte_completo():
    """
    Ejemplo completo de c√≥mo generar un reporte profesional de an√°lisis de portafolio.
    
    Este ejemplo:
    1. Define un portafolio de ejemplo con activos tecnol√≥gicos
    2. Descarga datos reales de mercado de Yahoo Finance
    3. Calcula m√©tricas de rendimiento y riesgo
    4. Genera gr√°ficos profesionales
    5. Crea un reporte completo en Markdown
    """
    
    print("üöÄ Iniciando an√°lisis completo de portafolio...")
    print("=" * 60)
    
    # 1. Configuraci√≥n del portafolio (centralizado en proveedor)
    print("‚öôÔ∏è Configurando portafolio (Proveedor)...")
    cfg = get_client_portfolio(client_id=None)
    symbols = cfg['tickers']
    weights = cfg['weights']
    
    print(f"   ‚Ä¢ Activos: {', '.join(symbols)}")
    print(f"   ‚Ä¢ Pesos: {', '.join([f'{w*100:.0f}%' for w in weights.values()])}")

    # 2.5. Obtener informaci√≥n actual de cada activo
    print("\n‚ÑπÔ∏è  Obteniendo informaci√≥n de precios en tiempo real...")
    current_assets_info = {}
    for symbol in symbols:
        info = get_current_asset_info(symbol)
        current_assets_info[symbol] = info
        if "error" in info:
            print(f"   ‚Ä¢ {symbol}: {info['error']}")
        else:
            # Formatear market cap y volumen para mejor legibilidad
            market_cap_val = info.get('market_cap')
            volume_val = info.get('volume')
            market_cap_str = f"MC: ${market_cap_val / 1e9:.2f}B" if market_cap_val else "MC: N/A"
            volume_str = f"Vol: {volume_val / 1e6:.2f}M" if volume_val else "Vol: N/A"
            print(f"   ‚Ä¢ {info['ticker']:<7} | Precio: ${info.get('current_price', 0):<8.2f} ({info.get('percent_change', 0):>6.2f}%) | {market_cap_str:<15} | {volume_str}")

    # 2. Descarga de datos de mercado (proveedor)
    print("\nüìä Descargando datos de mercado (Proveedor)...")
    
    try:
        asset_data, asset_returns = fetch_portfolio_market_data(symbols, period="5y")
        
        print(f"   ‚úÖ Descargados {len(asset_data)} d√≠as de datos")
        
        # 3. Calcular retornos del portafolio
        print("\nüî¢ Calculando retornos del portafolio...")
        weights_array = np.array([weights[symbol] for symbol in symbols])
        portfolio_returns = calculate_portfolio_returns(asset_returns, weights_array)
        
        print(f"   ‚Ä¢ Retorno promedio diario: {portfolio_returns.mean():.4f}")
        print(f"   ‚Ä¢ Volatilidad diaria: {portfolio_returns.std():.4f}")
        
        # 4. Generar an√°lisis completo
        print("\nüîç Generando an√°lisis completo...")
        print("   ‚Ä¢ Calculando m√©tricas de rendimiento...")
        print("   ‚Ä¢ Optimizando portafolios...")
        print("   ‚Ä¢ Generando gr√°ficos...")
        print("   ‚Ä¢ Creando reporte en Markdown...")
        
        output_files = generate_complete_analysis(
            portfolio_returns=portfolio_returns,
            asset_returns=asset_returns,
            portfolio_weights=weights,
            risk_free_rate=0.02,  # 2% anual (tasa libre de riesgo t√≠pica)
            output_dir="outputs",
            generate_api_response=True  # Activar generaci√≥n de respuesta JSON para API
        )
        
        # 5. Mostrar resultados
        print("\n" + "=" * 60)
        print("‚úÖ ¬°An√°lisis completado exitosamente!")
        print("=" * 60)
        
        print("\nüìÅ Archivos generados:")
        for file_type, path in output_files.items():
            if path: # Asegurarse de que la ruta no sea None
                is_image = any(ext in path for ext in ['.png', '.html'])
                is_json = path.endswith('.json')
                try:
                    file_size = os.path.getsize(path)
                    size_str = f"{file_size / 1024:.2f} KB"
                except (OSError, TypeError):
                    size_str = "N/A"

                if 'interactive' in file_type:
                    print(f"   üåê {file_type}: {path} (Interactivo, {size_str})")
                elif is_json:
                    print(f"   üìä {file_type}: {path} (JSON API, {size_str})")
                elif is_image:
                    print(f"   üñºÔ∏è {file_type}: {path} (Imagen, {size_str})")
                else:
                    print(f"   üìÑ {file_type}: {path} (Reporte, {size_str})")

        print(f"\nüéØ Acciones recomendadas:")
        print(f"   1. Abrir y revisar el reporte principal: {output_files.get('markdown_report')}")
        print(f"   2. Explorar los gr√°ficos interactivos (archivos .html) en la carpeta 'outputs/'")
        print(f"   3. Considerar las recomendaciones de optimizaci√≥n del reporte.")
        
        print(f"\nüí° Pr√≥ximos pasos:")
        print(f"   ‚Ä¢ Personaliza los pesos del portafolio seg√∫n tus preferencias")
        print(f"   ‚Ä¢ Experimenta con diferentes activos")
        print(f"   ‚Ä¢ Compara con un benchmark (ej. S&P 500)")
        
        return output_files
        
    except Exception as e:
        print(f"\n‚ùå Error durante el an√°lisis: {e}")
        print("\nüîß Posibles soluciones:")
        print("   ‚Ä¢ Verifica tu conexi√≥n a internet")
        print("   ‚Ä¢ Comprueba que los s√≠mbolos de activos sean v√°lidos")
        print("   ‚Ä¢ Aseg√∫rate de que las dependencias est√©n instaladas")
        print("   ‚Ä¢ Ejecuta: pip install -r requirements.txt")
        
        import traceback
        print(f"\nüêõ Detalles t√©cnicos del error:")
        traceback.print_exc()
        
        return None

if __name__ == "__main__":
    print("üè¶ Analizador de Portafolios de Inversi√≥n")
    print("üìà Generaci√≥n de Reportes Profesionales")
    print()
    
    result = ejemplo_reporte_completo()
    
    if result:
        print("\nüéâ ¬°An√°lisis completado! Revisa los archivos generados.")
    else:
        print("\n‚ö†Ô∏è El an√°lisis no pudo completarse. Revisa los errores mostrados.")
    
    print("\nGracias por usar el Analizador de Portafolios üöÄ")
